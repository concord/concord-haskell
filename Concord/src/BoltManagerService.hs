{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module BoltManagerService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Bolt_Types
import qualified BoltManagerService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data SetEnvironmentVar_args = SetEnvironmentVar_args  { setEnvironmentVar_args_name :: LT.Text
  , setEnvironmentVar_args_value :: LT.Text
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable SetEnvironmentVar_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` setEnvironmentVar_args_name record   `H.hashWithSalt` setEnvironmentVar_args_value record  
instance QC.Arbitrary SetEnvironmentVar_args where 
  arbitrary = M.liftM SetEnvironmentVar_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SetEnvironmentVar_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetEnvironmentVar_args{setEnvironmentVar_args_name = setEnvironmentVar_args_name obj} then P.Nothing else P.Just $ default_SetEnvironmentVar_args{setEnvironmentVar_args_name = setEnvironmentVar_args_name obj}
    , if obj == default_SetEnvironmentVar_args{setEnvironmentVar_args_value = setEnvironmentVar_args_value obj} then P.Nothing else P.Just $ default_SetEnvironmentVar_args{setEnvironmentVar_args_value = setEnvironmentVar_args_value obj}
    ]
from_SetEnvironmentVar_args :: SetEnvironmentVar_args -> T.ThriftVal
from_SetEnvironmentVar_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v185 -> P.Just (1, ("name",T.TString $ E.encodeUtf8 _v185))) $ setEnvironmentVar_args_name record
  , (\_v185 -> P.Just (2, ("value",T.TString $ E.encodeUtf8 _v185))) $ setEnvironmentVar_args_value record
  ]
write_SetEnvironmentVar_args :: (T.Protocol p, T.Transport t) => p t -> SetEnvironmentVar_args -> P.IO ()
write_SetEnvironmentVar_args oprot record = T.writeVal oprot $ from_SetEnvironmentVar_args record
encode_SetEnvironmentVar_args :: (T.Protocol p, T.Transport t) => p t -> SetEnvironmentVar_args -> LBS.ByteString
encode_SetEnvironmentVar_args oprot record = T.serializeVal oprot $ from_SetEnvironmentVar_args record
to_SetEnvironmentVar_args :: T.ThriftVal -> SetEnvironmentVar_args
to_SetEnvironmentVar_args (T.TStruct fields) = SetEnvironmentVar_args{
  setEnvironmentVar_args_name = P.maybe (setEnvironmentVar_args_name default_SetEnvironmentVar_args) (\(_,_val187) -> (case _val187 of {T.TString _val188 -> E.decodeUtf8 _val188; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  setEnvironmentVar_args_value = P.maybe (setEnvironmentVar_args_value default_SetEnvironmentVar_args) (\(_,_val187) -> (case _val187 of {T.TString _val189 -> E.decodeUtf8 _val189; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SetEnvironmentVar_args _ = P.error "not a struct"
read_SetEnvironmentVar_args :: (T.Transport t, T.Protocol p) => p t -> P.IO SetEnvironmentVar_args
read_SetEnvironmentVar_args iprot = to_SetEnvironmentVar_args <$> T.readVal iprot (T.T_STRUCT typemap_SetEnvironmentVar_args)
decode_SetEnvironmentVar_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> SetEnvironmentVar_args
decode_SetEnvironmentVar_args iprot bs = to_SetEnvironmentVar_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SetEnvironmentVar_args) bs
typemap_SetEnvironmentVar_args :: T.TypeMap
typemap_SetEnvironmentVar_args = Map.fromList [(1,("name",T.T_STRING)),(2,("value",T.T_STRING))]
default_SetEnvironmentVar_args :: SetEnvironmentVar_args
default_SetEnvironmentVar_args = SetEnvironmentVar_args{
  setEnvironmentVar_args_name = "",
  setEnvironmentVar_args_value = ""}
data SetEnvironmentVar_result = SetEnvironmentVar_result  { setEnvironmentVar_result_e :: P.Maybe BoltError
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable SetEnvironmentVar_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` setEnvironmentVar_result_e record  
instance QC.Arbitrary SetEnvironmentVar_result where 
  arbitrary = M.liftM SetEnvironmentVar_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SetEnvironmentVar_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetEnvironmentVar_result{setEnvironmentVar_result_e = setEnvironmentVar_result_e obj} then P.Nothing else P.Just $ default_SetEnvironmentVar_result{setEnvironmentVar_result_e = setEnvironmentVar_result_e obj}
    ]
from_SetEnvironmentVar_result :: SetEnvironmentVar_result -> T.ThriftVal
from_SetEnvironmentVar_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v192 -> (1, ("e",from_BoltError _v192))) <$> setEnvironmentVar_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v192 -> (1, ("e",from_BoltError _v192))) <$> setEnvironmentVar_result_e record
    ]
    )
write_SetEnvironmentVar_result :: (T.Protocol p, T.Transport t) => p t -> SetEnvironmentVar_result -> P.IO ()
write_SetEnvironmentVar_result oprot record = T.writeVal oprot $ from_SetEnvironmentVar_result record
encode_SetEnvironmentVar_result :: (T.Protocol p, T.Transport t) => p t -> SetEnvironmentVar_result -> LBS.ByteString
encode_SetEnvironmentVar_result oprot record = T.serializeVal oprot $ from_SetEnvironmentVar_result record
to_SetEnvironmentVar_result :: T.ThriftVal -> SetEnvironmentVar_result
to_SetEnvironmentVar_result (T.TStruct fields) = SetEnvironmentVar_result{
  setEnvironmentVar_result_e = P.maybe (P.Nothing) (\(_,_val194) -> P.Just (case _val194 of {T.TStruct _val195 -> (to_BoltError (T.TStruct _val195)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SetEnvironmentVar_result _ = P.error "not a struct"
read_SetEnvironmentVar_result :: (T.Transport t, T.Protocol p) => p t -> P.IO SetEnvironmentVar_result
read_SetEnvironmentVar_result iprot = to_SetEnvironmentVar_result <$> T.readVal iprot (T.T_STRUCT typemap_SetEnvironmentVar_result)
decode_SetEnvironmentVar_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> SetEnvironmentVar_result
decode_SetEnvironmentVar_result iprot bs = to_SetEnvironmentVar_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SetEnvironmentVar_result) bs
typemap_SetEnvironmentVar_result :: T.TypeMap
typemap_SetEnvironmentVar_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_BoltError)))]
default_SetEnvironmentVar_result :: SetEnvironmentVar_result
default_SetEnvironmentVar_result = SetEnvironmentVar_result{
  setEnvironmentVar_result_e = P.Nothing}
data Signal_args = Signal_args  { signal_args_topologyId :: I.Int64
  , signal_args_s :: Signal
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable Signal_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` signal_args_topologyId record   `H.hashWithSalt` signal_args_s record  
instance QC.Arbitrary Signal_args where 
  arbitrary = M.liftM Signal_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Signal_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Signal_args{signal_args_topologyId = signal_args_topologyId obj} then P.Nothing else P.Just $ default_Signal_args{signal_args_topologyId = signal_args_topologyId obj}
    , if obj == default_Signal_args{signal_args_s = signal_args_s obj} then P.Nothing else P.Just $ default_Signal_args{signal_args_s = signal_args_s obj}
    ]
from_Signal_args :: Signal_args -> T.ThriftVal
from_Signal_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v198 -> P.Just (1, ("topologyId",T.TI64 _v198))) $ signal_args_topologyId record
  , (\_v198 -> P.Just (2, ("s",T.TI32 $ P.fromIntegral $ P.fromEnum _v198))) $ signal_args_s record
  ]
write_Signal_args :: (T.Protocol p, T.Transport t) => p t -> Signal_args -> P.IO ()
write_Signal_args oprot record = T.writeVal oprot $ from_Signal_args record
encode_Signal_args :: (T.Protocol p, T.Transport t) => p t -> Signal_args -> LBS.ByteString
encode_Signal_args oprot record = T.serializeVal oprot $ from_Signal_args record
to_Signal_args :: T.ThriftVal -> Signal_args
to_Signal_args (T.TStruct fields) = Signal_args{
  signal_args_topologyId = P.maybe (signal_args_topologyId default_Signal_args) (\(_,_val200) -> (case _val200 of {T.TI64 _val201 -> _val201; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  signal_args_s = P.maybe (signal_args_s default_Signal_args) (\(_,_val200) -> (case _val200 of {T.TI32 _val202 -> P.toEnum $ P.fromIntegral _val202; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Signal_args _ = P.error "not a struct"
read_Signal_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Signal_args
read_Signal_args iprot = to_Signal_args <$> T.readVal iprot (T.T_STRUCT typemap_Signal_args)
decode_Signal_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Signal_args
decode_Signal_args iprot bs = to_Signal_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Signal_args) bs
typemap_Signal_args :: T.TypeMap
typemap_Signal_args = Map.fromList [(1,("topologyId",T.T_I64)),(2,("s",T.T_I32))]
default_Signal_args :: Signal_args
default_Signal_args = Signal_args{
  signal_args_topologyId = 0,
  signal_args_s = (P.toEnum 0)}
data Signal_result = Signal_result  { signal_result_e :: P.Maybe BoltError
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable Signal_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` signal_result_e record  
instance QC.Arbitrary Signal_result where 
  arbitrary = M.liftM Signal_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_Signal_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Signal_result{signal_result_e = signal_result_e obj} then P.Nothing else P.Just $ default_Signal_result{signal_result_e = signal_result_e obj}
    ]
from_Signal_result :: Signal_result -> T.ThriftVal
from_Signal_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v205 -> (1, ("e",from_BoltError _v205))) <$> signal_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v205 -> (1, ("e",from_BoltError _v205))) <$> signal_result_e record
    ]
    )
write_Signal_result :: (T.Protocol p, T.Transport t) => p t -> Signal_result -> P.IO ()
write_Signal_result oprot record = T.writeVal oprot $ from_Signal_result record
encode_Signal_result :: (T.Protocol p, T.Transport t) => p t -> Signal_result -> LBS.ByteString
encode_Signal_result oprot record = T.serializeVal oprot $ from_Signal_result record
to_Signal_result :: T.ThriftVal -> Signal_result
to_Signal_result (T.TStruct fields) = Signal_result{
  signal_result_e = P.maybe (P.Nothing) (\(_,_val207) -> P.Just (case _val207 of {T.TStruct _val208 -> (to_BoltError (T.TStruct _val208)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Signal_result _ = P.error "not a struct"
read_Signal_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Signal_result
read_Signal_result iprot = to_Signal_result <$> T.readVal iprot (T.T_STRUCT typemap_Signal_result)
decode_Signal_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Signal_result
decode_Signal_result iprot bs = to_Signal_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Signal_result) bs
typemap_Signal_result :: T.TypeMap
typemap_Signal_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_BoltError)))]
default_Signal_result :: Signal_result
default_Signal_result = Signal_result{
  signal_result_e = P.Nothing}
process_setEnvironmentVar (seqid, iprot, oprot, handler) = do
  args <- read_SetEnvironmentVar_args iprot
  (X.catch
    (X.catch
      (do
        Iface.setEnvironmentVar handler (setEnvironmentVar_args_name args) (setEnvironmentVar_args_value args)
        let res = default_SetEnvironmentVar_result
        T.writeMessageBegin oprot ("setEnvironmentVar", T.M_REPLY, seqid)
        write_SetEnvironmentVar_result oprot res
        T.writeMessageEnd oprot
        T.tFlush (T.getTransport oprot))
      (\e  -> do
        let res = default_SetEnvironmentVar_result{setEnvironmentVar_result_e = P.Just e}
        T.writeMessageBegin oprot ("setEnvironmentVar", T.M_REPLY, seqid)
        write_SetEnvironmentVar_result oprot res
        T.writeMessageEnd oprot
        T.tFlush (T.getTransport oprot)))
    ((\_ -> do
      T.writeMessageBegin oprot ("setEnvironmentVar", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_signal (seqid, iprot, oprot, handler) = do
  args <- read_Signal_args iprot
  (X.catch
    (X.catch
      (do
        Iface.signal handler (signal_args_topologyId args) (signal_args_s args)
        let res = default_Signal_result
        T.writeMessageBegin oprot ("signal", T.M_REPLY, seqid)
        write_Signal_result oprot res
        T.writeMessageEnd oprot
        T.tFlush (T.getTransport oprot))
      (\e  -> do
        let res = default_Signal_result{signal_result_e = P.Just e}
        T.writeMessageBegin oprot ("signal", T.M_REPLY, seqid)
        write_Signal_result oprot res
        T.writeMessageEnd oprot
        T.tFlush (T.getTransport oprot)))
    ((\_ -> do
      T.writeMessageBegin oprot ("signal", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "setEnvironmentVar" -> process_setEnvironmentVar (seqid,iprot,oprot,handler)
  "signal" -> process_signal (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessageBegin oprot (name,T.M_EXCEPTION,seqid)
    T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    T.writeMessageEnd oprot
    T.tFlush (T.getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- T.readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  T.readMessageEnd iprot
  P.return P.True
