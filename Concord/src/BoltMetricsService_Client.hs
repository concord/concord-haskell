{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module BoltMetricsService_Client(gauge,timer,histogram,sum) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Bolt_Types
import BoltMetricsService
seqid = R.newIORef 0
gauge (ip,op) arg_name arg_val = do
  send_gauge op arg_name arg_val
  recv_gauge ip
send_gauge op arg_name arg_val = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("gauge", T.M_CALL, seqn)
  write_Gauge_args op (Gauge_args{gauge_args_name=arg_name,gauge_args_val=arg_val})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_gauge ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Gauge_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (gauge_result_e res)
  P.return ()
timer (ip,op) arg_name arg_duration = do
  send_timer op arg_name arg_duration
  recv_timer ip
send_timer op arg_name arg_duration = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timer", T.M_CALL, seqn)
  write_Timer_args op (Timer_args{timer_args_name=arg_name,timer_args_duration=arg_duration})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_timer ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Timer_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (timer_result_e res)
  P.return ()
histogram (ip,op) arg_name arg_measure = do
  send_histogram op arg_name arg_measure
  recv_histogram ip
send_histogram op arg_name arg_measure = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("histogram", T.M_CALL, seqn)
  write_Histogram_args op (Histogram_args{histogram_args_name=arg_name,histogram_args_measure=arg_measure})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_histogram ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Histogram_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (histogram_result_e res)
  P.return ()
sum (ip,op) arg_name arg_counter = do
  send_sum op arg_name arg_counter
  recv_sum ip
send_sum op arg_name arg_counter = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("sum", T.M_CALL, seqn)
  write_Sum_args op (Sum_args{sum_args_name=arg_name,sum_args_counter=arg_counter})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_sum ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Sum_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (sum_result_e res)
  P.return ()
