{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module BoltSchedulerService_Client(deployComputation,getComputationSlug,registerComputation,scaleComputation,killTask) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Bolt_Types
import BoltSchedulerService
seqid = R.newIORef 0
deployComputation (ip,op) arg_request = do
  send_deployComputation op arg_request
  recv_deployComputation ip
send_deployComputation op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("deployComputation", T.M_CALL, seqn)
  write_DeployComputation_args op (DeployComputation_args{deployComputation_args_request=arg_request})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_deployComputation ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_DeployComputation_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (deployComputation_result_e res)
  P.return ()
getComputationSlug (ip,op) arg_computationName = do
  send_getComputationSlug op arg_computationName
  recv_getComputationSlug ip
send_getComputationSlug op arg_computationName = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("getComputationSlug", T.M_CALL, seqn)
  write_GetComputationSlug_args op (GetComputationSlug_args{getComputationSlug_args_computationName=arg_computationName})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_getComputationSlug ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_GetComputationSlug_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (getComputationSlug_result_e res)
  P.return $ getComputationSlug_result_success res
registerComputation (ip,op) arg_computation = do
  send_registerComputation op arg_computation
  recv_registerComputation ip
send_registerComputation op arg_computation = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("registerComputation", T.M_CALL, seqn)
  write_RegisterComputation_args op (RegisterComputation_args{registerComputation_args_computation=arg_computation})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_registerComputation ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_RegisterComputation_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (registerComputation_result_e res)
  P.return $ registerComputation_result_success res
scaleComputation (ip,op) arg_computationName arg_instances = do
  send_scaleComputation op arg_computationName arg_instances
  recv_scaleComputation ip
send_scaleComputation op arg_computationName arg_instances = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("scaleComputation", T.M_CALL, seqn)
  write_ScaleComputation_args op (ScaleComputation_args{scaleComputation_args_computationName=arg_computationName,scaleComputation_args_instances=arg_instances})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_scaleComputation ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_ScaleComputation_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (scaleComputation_result_e res)
  P.return ()
killTask (ip,op) arg_taskId = do
  send_killTask op arg_taskId
  recv_killTask ip
send_killTask op arg_taskId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("killTask", T.M_CALL, seqn)
  write_KillTask_args op (KillTask_args{killTask_args_taskId=arg_taskId})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_killTask ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_KillTask_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (killTask_result_e res)
  P.return ()
