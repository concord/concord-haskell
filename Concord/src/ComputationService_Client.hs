{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module ComputationService_Client(init,boltProcessRecords,boltProcessTimer,boltMetadata) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Bolt_Types
import ComputationService
seqid = R.newIORef 0
init (ip,op) = do
  send_init op
  recv_init ip
send_init op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("init", T.M_CALL, seqn)
  write_Init_args op (Init_args{})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_init ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Init_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (init_result_e res)
  P.return $ init_result_success res
boltProcessRecords (ip,op) arg_records = do
  send_boltProcessRecords op arg_records
  recv_boltProcessRecords ip
send_boltProcessRecords op arg_records = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("boltProcessRecords", T.M_CALL, seqn)
  write_BoltProcessRecords_args op (BoltProcessRecords_args{boltProcessRecords_args_records=arg_records})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_boltProcessRecords ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_BoltProcessRecords_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (boltProcessRecords_result_e res)
  P.return $ boltProcessRecords_result_success res
boltProcessTimer (ip,op) arg_key arg_time = do
  send_boltProcessTimer op arg_key arg_time
  recv_boltProcessTimer ip
send_boltProcessTimer op arg_key arg_time = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("boltProcessTimer", T.M_CALL, seqn)
  write_BoltProcessTimer_args op (BoltProcessTimer_args{boltProcessTimer_args_key=arg_key,boltProcessTimer_args_time=arg_time})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_boltProcessTimer ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_BoltProcessTimer_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (boltProcessTimer_result_e res)
  P.return $ boltProcessTimer_result_success res
boltMetadata (ip,op) = do
  send_boltMetadata op
  recv_boltMetadata ip
send_boltMetadata op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("boltMetadata", T.M_CALL, seqn)
  write_BoltMetadata_args op (BoltMetadata_args{})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_boltMetadata ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_BoltMetadata_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (boltMetadata_result_e res)
  P.return $ boltMetadata_result_success res
