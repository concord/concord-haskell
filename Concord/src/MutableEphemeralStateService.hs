{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module MutableEphemeralStateService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Bolt_Types
import qualified MutableEphemeralStateService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data SetState_args = SetState_args  { setState_args_key :: LT.Text
  , setState_args_value :: LBS.ByteString
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable SetState_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` setState_args_key record   `H.hashWithSalt` setState_args_value record  
instance QC.Arbitrary SetState_args where 
  arbitrary = M.liftM SetState_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SetState_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetState_args{setState_args_key = setState_args_key obj} then P.Nothing else P.Just $ default_SetState_args{setState_args_key = setState_args_key obj}
    , if obj == default_SetState_args{setState_args_value = setState_args_value obj} then P.Nothing else P.Just $ default_SetState_args{setState_args_value = setState_args_value obj}
    ]
from_SetState_args :: SetState_args -> T.ThriftVal
from_SetState_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v211 -> P.Just (1, ("key",T.TString $ E.encodeUtf8 _v211))) $ setState_args_key record
  , (\_v211 -> P.Just (2, ("value",T.TString _v211))) $ setState_args_value record
  ]
write_SetState_args :: (T.Protocol p, T.Transport t) => p t -> SetState_args -> P.IO ()
write_SetState_args oprot record = T.writeVal oprot $ from_SetState_args record
encode_SetState_args :: (T.Protocol p, T.Transport t) => p t -> SetState_args -> LBS.ByteString
encode_SetState_args oprot record = T.serializeVal oprot $ from_SetState_args record
to_SetState_args :: T.ThriftVal -> SetState_args
to_SetState_args (T.TStruct fields) = SetState_args{
  setState_args_key = P.maybe (setState_args_key default_SetState_args) (\(_,_val213) -> (case _val213 of {T.TString _val214 -> E.decodeUtf8 _val214; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  setState_args_value = P.maybe (setState_args_value default_SetState_args) (\(_,_val213) -> (case _val213 of {T.TString _val215 -> _val215; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SetState_args _ = P.error "not a struct"
read_SetState_args :: (T.Transport t, T.Protocol p) => p t -> P.IO SetState_args
read_SetState_args iprot = to_SetState_args <$> T.readVal iprot (T.T_STRUCT typemap_SetState_args)
decode_SetState_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> SetState_args
decode_SetState_args iprot bs = to_SetState_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SetState_args) bs
typemap_SetState_args :: T.TypeMap
typemap_SetState_args = Map.fromList [(1,("key",T.T_STRING)),(2,("value",T.T_STRING))]
default_SetState_args :: SetState_args
default_SetState_args = SetState_args{
  setState_args_key = "",
  setState_args_value = ""}
data SetState_result = SetState_result  { setState_result_e :: P.Maybe BoltError
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable SetState_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` setState_result_e record  
instance QC.Arbitrary SetState_result where 
  arbitrary = M.liftM SetState_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SetState_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetState_result{setState_result_e = setState_result_e obj} then P.Nothing else P.Just $ default_SetState_result{setState_result_e = setState_result_e obj}
    ]
from_SetState_result :: SetState_result -> T.ThriftVal
from_SetState_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v218 -> (1, ("e",from_BoltError _v218))) <$> setState_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v218 -> (1, ("e",from_BoltError _v218))) <$> setState_result_e record
    ]
    )
write_SetState_result :: (T.Protocol p, T.Transport t) => p t -> SetState_result -> P.IO ()
write_SetState_result oprot record = T.writeVal oprot $ from_SetState_result record
encode_SetState_result :: (T.Protocol p, T.Transport t) => p t -> SetState_result -> LBS.ByteString
encode_SetState_result oprot record = T.serializeVal oprot $ from_SetState_result record
to_SetState_result :: T.ThriftVal -> SetState_result
to_SetState_result (T.TStruct fields) = SetState_result{
  setState_result_e = P.maybe (P.Nothing) (\(_,_val220) -> P.Just (case _val220 of {T.TStruct _val221 -> (to_BoltError (T.TStruct _val221)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SetState_result _ = P.error "not a struct"
read_SetState_result :: (T.Transport t, T.Protocol p) => p t -> P.IO SetState_result
read_SetState_result iprot = to_SetState_result <$> T.readVal iprot (T.T_STRUCT typemap_SetState_result)
decode_SetState_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> SetState_result
decode_SetState_result iprot bs = to_SetState_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SetState_result) bs
typemap_SetState_result :: T.TypeMap
typemap_SetState_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_BoltError)))]
default_SetState_result :: SetState_result
default_SetState_result = SetState_result{
  setState_result_e = P.Nothing}
data GetState_args = GetState_args  { getState_args_key :: LT.Text
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable GetState_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getState_args_key record  
instance QC.Arbitrary GetState_args where 
  arbitrary = M.liftM GetState_args (QC.arbitrary)
  shrink obj | obj == default_GetState_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetState_args{getState_args_key = getState_args_key obj} then P.Nothing else P.Just $ default_GetState_args{getState_args_key = getState_args_key obj}
    ]
from_GetState_args :: GetState_args -> T.ThriftVal
from_GetState_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v224 -> P.Just (1, ("key",T.TString $ E.encodeUtf8 _v224))) $ getState_args_key record
  ]
write_GetState_args :: (T.Protocol p, T.Transport t) => p t -> GetState_args -> P.IO ()
write_GetState_args oprot record = T.writeVal oprot $ from_GetState_args record
encode_GetState_args :: (T.Protocol p, T.Transport t) => p t -> GetState_args -> LBS.ByteString
encode_GetState_args oprot record = T.serializeVal oprot $ from_GetState_args record
to_GetState_args :: T.ThriftVal -> GetState_args
to_GetState_args (T.TStruct fields) = GetState_args{
  getState_args_key = P.maybe (getState_args_key default_GetState_args) (\(_,_val226) -> (case _val226 of {T.TString _val227 -> E.decodeUtf8 _val227; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetState_args _ = P.error "not a struct"
read_GetState_args :: (T.Transport t, T.Protocol p) => p t -> P.IO GetState_args
read_GetState_args iprot = to_GetState_args <$> T.readVal iprot (T.T_STRUCT typemap_GetState_args)
decode_GetState_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> GetState_args
decode_GetState_args iprot bs = to_GetState_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetState_args) bs
typemap_GetState_args :: T.TypeMap
typemap_GetState_args = Map.fromList [(1,("key",T.T_STRING))]
default_GetState_args :: GetState_args
default_GetState_args = GetState_args{
  getState_args_key = ""}
data GetState_result = GetState_result  { getState_result_success :: LBS.ByteString
  , getState_result_e :: P.Maybe BoltError
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable GetState_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getState_result_success record   `H.hashWithSalt` getState_result_e record  
instance QC.Arbitrary GetState_result where 
  arbitrary = M.liftM GetState_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetState_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetState_result{getState_result_success = getState_result_success obj} then P.Nothing else P.Just $ default_GetState_result{getState_result_success = getState_result_success obj}
    , if obj == default_GetState_result{getState_result_e = getState_result_e obj} then P.Nothing else P.Just $ default_GetState_result{getState_result_e = getState_result_e obj}
    ]
from_GetState_result :: GetState_result -> T.ThriftVal
from_GetState_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v230 -> (1, ("e",from_BoltError _v230))) <$> getState_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v230 -> P.Just (0, ("success",T.TString _v230))) $ getState_result_success record
    , (\_v230 -> (1, ("e",from_BoltError _v230))) <$> getState_result_e record
    ]
    )
write_GetState_result :: (T.Protocol p, T.Transport t) => p t -> GetState_result -> P.IO ()
write_GetState_result oprot record = T.writeVal oprot $ from_GetState_result record
encode_GetState_result :: (T.Protocol p, T.Transport t) => p t -> GetState_result -> LBS.ByteString
encode_GetState_result oprot record = T.serializeVal oprot $ from_GetState_result record
to_GetState_result :: T.ThriftVal -> GetState_result
to_GetState_result (T.TStruct fields) = GetState_result{
  getState_result_success = P.maybe (getState_result_success default_GetState_result) (\(_,_val232) -> (case _val232 of {T.TString _val233 -> _val233; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getState_result_e = P.maybe (P.Nothing) (\(_,_val232) -> P.Just (case _val232 of {T.TStruct _val234 -> (to_BoltError (T.TStruct _val234)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetState_result _ = P.error "not a struct"
read_GetState_result :: (T.Transport t, T.Protocol p) => p t -> P.IO GetState_result
read_GetState_result iprot = to_GetState_result <$> T.readVal iprot (T.T_STRUCT typemap_GetState_result)
decode_GetState_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> GetState_result
decode_GetState_result iprot bs = to_GetState_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetState_result) bs
typemap_GetState_result :: T.TypeMap
typemap_GetState_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_BoltError)))]
default_GetState_result :: GetState_result
default_GetState_result = GetState_result{
  getState_result_success = "",
  getState_result_e = P.Nothing}
process_setState (seqid, iprot, oprot, handler) = do
  args <- read_SetState_args iprot
  (X.catch
    (X.catch
      (do
        Iface.setState handler (setState_args_key args) (setState_args_value args)
        let res = default_SetState_result
        T.writeMessageBegin oprot ("setState", T.M_REPLY, seqid)
        write_SetState_result oprot res
        T.writeMessageEnd oprot
        T.tFlush (T.getTransport oprot))
      (\e  -> do
        let res = default_SetState_result{setState_result_e = P.Just e}
        T.writeMessageBegin oprot ("setState", T.M_REPLY, seqid)
        write_SetState_result oprot res
        T.writeMessageEnd oprot
        T.tFlush (T.getTransport oprot)))
    ((\_ -> do
      T.writeMessageBegin oprot ("setState", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_getState (seqid, iprot, oprot, handler) = do
  args <- read_GetState_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getState handler (getState_args_key args)
        let res = default_GetState_result{getState_result_success = val}
        T.writeMessageBegin oprot ("getState", T.M_REPLY, seqid)
        write_GetState_result oprot res
        T.writeMessageEnd oprot
        T.tFlush (T.getTransport oprot))
      (\e  -> do
        let res = default_GetState_result{getState_result_e = P.Just e}
        T.writeMessageBegin oprot ("getState", T.M_REPLY, seqid)
        write_GetState_result oprot res
        T.writeMessageEnd oprot
        T.tFlush (T.getTransport oprot)))
    ((\_ -> do
      T.writeMessageBegin oprot ("getState", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "setState" -> process_setState (seqid,iprot,oprot,handler)
  "getState" -> process_getState (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessageBegin oprot (name,T.M_EXCEPTION,seqid)
    T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    T.writeMessageEnd oprot
    T.tFlush (T.getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- T.readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  T.readMessageEnd iprot
  P.return P.True
