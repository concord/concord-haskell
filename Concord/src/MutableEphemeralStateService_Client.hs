{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module MutableEphemeralStateService_Client(setState,getState) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Bolt_Types
import MutableEphemeralStateService
seqid = R.newIORef 0
setState (ip,op) arg_key arg_value = do
  send_setState op arg_key arg_value
  recv_setState ip
send_setState op arg_key arg_value = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("setState", T.M_CALL, seqn)
  write_SetState_args op (SetState_args{setState_args_key=arg_key,setState_args_value=arg_value})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_setState ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_SetState_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (setState_result_e res)
  P.return ()
getState (ip,op) arg_key = do
  send_getState op arg_key
  recv_getState ip
send_getState op arg_key = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("getState", T.M_CALL, seqn)
  write_GetState_args op (GetState_args{getState_args_key=arg_key})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_getState ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_GetState_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (getState_result_e res)
  P.return $ getState_result_success res
